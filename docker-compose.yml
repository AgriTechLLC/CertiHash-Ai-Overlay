version: '3.8'

services:
  # Metrics Service
  metrics-service:
    build: ./metrics-service
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - certihash-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Authentication Service
  auth-service:
    build: ./auth-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/certihash-auth
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=1h
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRES_IN=7d
      - CORS_ORIGIN=*
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - certihash-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # LiteLLM Proxy Server
  litellm:
    build: ./ai-service
    ports:
      - "4000:4000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - certihash-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # MCP-Grafana Server for AI interaction with Grafana
  mcp-grafana:
    image: grafana/mcp-grafana:latest
    ports:
      - "8000:8000"
    environment:
      - GRAFANA_URL=http://grafana:3000
      - GRAFANA_API_KEY=${GRAFANA_API_KEY}
      - MCP_SERVER_ADDR=0.0.0.0:8000
      - MCP_TRANSPORT=sse
      - MCP_LOG_LEVEL=debug
      - MCP_TOOLS=search_dashboards,get_dashboard_by_uid,list_datasources,query_prometheus,list_prometheus_metric_names,list_prometheus_label_names,list_prometheus_label_values,query_loki_logs,list_alert_rules
    depends_on:
      - grafana
    restart: unless-stopped
    networks:
      - certihash-network
  
  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - certihash-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Prometheus for metrics collection with optimized settings
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./visualization/provisioning/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./visualization/provisioning/recording_rules.yml:/etc/prometheus/recording_rules.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.min-block-duration=2h'
      - '--storage.tsdb.max-block-duration=6h'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--query.max-samples=50000000'
      - '--query.timeout=2m'
    restart: unless-stopped
    networks:
      - certihash-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3030:3000"
    volumes:
      - ./visualization/dashboards:/var/lib/grafana/dashboards
      - ./visualization/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./visualization/provisioning/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-mongodb-datasource
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      # Performance optimizations
      - GF_SERVER_ENABLE_GZIP=true
      - GF_DATABASE_CACHE_MODE=continuous
      - GF_RENDERING_RENDERING_MODE=browser
    restart: unless-stopped
    networks:
      - certihash-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # MongoDB for storing AI results and user authentication
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    command: mongod --wiredTigerCacheSizeGB 1
    restart: unless-stopped
    networks:
      - certihash-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Vector database for AI embeddings
  vector-db:
    image: milvusdb/milvus:v2.3.4
    ports:
      - "19530:19530"
      - "9091:9091"
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    volumes:
      - milvus-data:/var/lib/milvus
    restart: unless-stopped
    networks:
      - certihash-network
    depends_on:
      - etcd
      - minio

  # Etcd for Milvus
  etcd:
    image: bitnami/etcd:3.5.1
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    volumes:
      - etcd-data:/bitnami/etcd
    networks:
      - certihash-network

  # MinIO for Milvus
  minio:
    image: minio/minio:RELEASE.2023-05-04T21-44-30Z
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio-data:/data
    command: minio server /data
    networks:
      - certihash-network
  
  # UI Backend
  ui-backend:
    build:
      context: ./ui
      dockerfile: Dockerfile.backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - GRAFANA_API_KEY=${GRAFANA_API_KEY}
      - LITELLM_URL=http://litellm:4000
      - LITELLM_API_KEY=${LITELLM_API_KEY}
      - MONGO_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/certihash
      - AUTH_SERVICE_URL=http://auth-service:3002
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MCP_GRAFANA_URL=http://mcp-grafana:8000
      - MILVUS_HOST=vector-db
      - MILVUS_PORT=19530
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - prometheus
      - grafana
      - litellm
      - mongodb
      - auth-service
      - redis
      - mcp-grafana
      - vector-db
    restart: unless-stopped
    networks:
      - certihash-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # UI Frontend
  ui-frontend:
    build:
      context: ./ui/src
      dockerfile: Dockerfile.frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ui-backend
    restart: unless-stopped
    networks:
      - certihash-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  certihash-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  mongodb-data:
  milvus-data:
  etcd-data:
  minio-data: